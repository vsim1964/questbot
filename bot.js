require("dotenv").config();
const { Telegraf } = require("telegraf");
const { Configuration, OpenAIApi } = require("openai");

const bot = new Telegraf(process.env.BOT_TOKEN);
const openai = new OpenAIApi(
	new Configuration({ apiKey: process.env.OPENAI_API_KEY })
);

const CHANNEL_ID = process.env.CHANNEL_ID; // ID –∫–∞–Ω–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç -100xxxxxxxxxx)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT
async function askChatGPT(question) {
	try {
		const response = await openai.createChatCompletion({
			model: "gpt-4", // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-3.5-turbo –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
			messages: [{ role: "user", content: question }],
			max_tokens: 200, // –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
		});

		return response.data.choices[0].message.content.trim();
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ ChatGPT:", error);
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
	ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª.");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on("text", async (ctx) => {
	const question = ctx.message.text;
	const chatId = ctx.chat.id;

	ctx.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...");

	const answer = await askChatGPT(question);

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
	try {
		await bot.telegram.sendMessage(CHANNEL_ID, `‚ùì *–í–æ–ø—Ä–æ—Å:* ${question}\n\nüí° *–û—Ç–≤–µ—Ç:* ${answer}`, { parse_mode: "Markdown" });
		ctx.reply("–û—Ç–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!");
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:", error);
		ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.");
	}
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
