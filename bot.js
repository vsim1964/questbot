require('dotenv').config();
const { Telegraf } = require("telegraf");
const { OpenAI } = require("openai");
const express = require("express");

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const CHANNEL_ID = process.env.CHANNEL_ID;
const PORT = process.env.PORT || 8080;
const WEBHOOK_URL = `https://questbot-production.up.railway.app/webhook/${BOT_TOKEN}`;

if (!BOT_TOKEN || !OPENAI_API_KEY || !CHANNEL_ID) {
	console.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
	process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT
async function askChatGPT(question) {
	try {
		const response = await openai.chat.completions.create({
			model: "gpt-4",
			messages: [{ role: "user", content: question }],
			max_tokens: 200,
		});

		return response.choices[0].message.content.trim();
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ ChatGPT:", error);
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
bot.start((ctx) => {
	ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª.");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", async (ctx) => {
	const question = ctx.message.text;
	ctx.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...");

	const answer = await askChatGPT(question);

	try {
		await bot.telegram.sendMessage(
			CHANNEL_ID,
			`‚ùì *–í–æ–ø—Ä–æ—Å:* ${question}\n\nüí° *–û—Ç–≤–µ—Ç:* ${answer}`,
			{ parse_mode: "Markdown" }
		);
		ctx.reply("–û—Ç–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!");
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:", error);
		ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.");
	}
});

// –°–æ–∑–¥–∞–Ω–∏–µ Express-—Å–µ—Ä–≤–µ—Ä–∞ (–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å Railway –∞–∫—Ç–∏–≤–Ω—ã–º)
const app = express();
app.use(express.json());

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.post(`/webhook/${BOT_TOKEN}`, (req, res) => {
	console.log('–ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å:', req.method, req.url);
	bot.handleUpdate(req.body);
	res.sendStatus(200);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
app.get(`/webhook/${BOT_TOKEN}`, (req, res) => {
	console.log('–ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –∫ webhook:', req.method, req.url);
	res.send('Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç (Railway —Ç–µ–ø–µ—Ä—å –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
app.get("/", (req, res) => {
	res.send("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ");
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Express
app.listen(PORT, async () => {
	console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π Webhook –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
	try {
		await bot.telegram.deleteWebhook();
		console.log("‚úÖ –°—Ç–∞—Ä—ã–π Webhook —É–¥–∞–ª—ë–Ω");
	} catch (error) {
		console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:", error.message);
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π Webhook
	try {
		await bot.telegram.setWebhook(WEBHOOK_URL);
		console.log(`‚úÖ –ù–æ–≤—ã–π Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
		const webhookInfo = await bot.telegram.getWebhookInfo();
		console.log("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:", JSON.stringify(webhookInfo, null, 2));
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook:", error.message);
	}
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Railway (–õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
setInterval(() => {
	console.log("‚úÖ –°–µ—Ä–≤–µ—Ä Railway —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è");
}, 1000 * 60 * 5);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
	console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
	console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});
